generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  password           String?
  email              String?             @unique
  emailVerified      DateTime?
  phoneNumber        String?             @unique
  image              String?
  stripeCustomerId   String?             @unique
  isActive           Boolean             @default(false)
  isAdmin            Boolean             @default(false) // ðŸ‘ˆ Add this field
  verificationTokens VerificationToken[]
  accounts           Account[]
  sessions           Session[]
}


model VerificationToken {
  id         String   @id @default(cuid()) // Add a primary key
  identifier String   @unique // Can store email or phone
  token      String   @unique
  expires    DateTime
  userId     String? // Optional: Link to User model
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
}


model Otp {
  id          String   @id @default(uuid())
  phoneNumber String   @unique
  otp         String
  expires     DateTime
}
