generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  password           String?
  email              String?             @unique
  emailVerified      DateTime?
  phoneNumber        String?             @unique
  image              String?
  stripeCustomerId   String?             @unique
  isActive           Boolean             @default(false)
  isAdmin            Boolean             @default(false) 
  verificationTokens VerificationToken[]
  accounts           Account[]
  sessions           Session[]
  payments           Payment[]   @relation("UserPayments")
  subscriptions      Subscription[]
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String   @unique
  token      String   @unique
  expires    DateTime
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
}

model Otp {
  id          String   @id @default(uuid())
  phoneNumber String   @unique
  otp         String
  expires     DateTime
}

model WebinarDetails {
  id                  String  @id @default(uuid())
  webinarSettingsId   String? @unique
  webinarSettings     WebinarSettings? @relation(fields: [webinarSettingsId], references: [id])
  webinarName         String
  webinarTitle        String
  description         String? // Added from ScheduleModal
  durationHours       Int
  durationMinutes     Int
  durationSeconds     Int
  attendeeSignIn      Boolean
  passwordProtected   Boolean
  webinarDate         DateTime
  webinarTime         String?
  selectedLanguage    String?
  brandImage          String?
  instantWatchEnabled Boolean @default(false)
  instantWatchSession String?
  justInTimeEnabled   Boolean
  justInTimeSession   String?
  scheduledDates      Json?
  createdAt           DateTime @default(now())
  video               Video?  @relation(fields: [videoId], references: [id])
  videoId             String? @unique
  resources           Json?
  payments            Payment[] @relation("WebinarPayments")
  isPaid              Boolean @default(false)
  paidAmount          Float?
  discountPercentage  Float?  @default(0) // Discount percentage (0-100)
  discountAmount      Float?  @default(0) // Discount amount in currency
}

model WebinarSettings {
  id                 String   @id @default(uuid())
  name               String?
  emailNotifications Json?
  textNotifications  Json?
  integration        String?
  sharingEnabled     Boolean  @default(false)
  sharingName        String?
  sharingUrl         String?
  createdAt          DateTime @default(now())
  registrants        Int      @default(0)
  attendees          Int      @default(0)
  status             String?  @default("Active")
  webinarDetails     WebinarDetails?
}

model Video {
  id              String   @id @default(uuid())
  title           String?
  url             String?
  publicId        String?
  createdAt       DateTime @default(now())
  webinarDetails  WebinarDetails?
}

model Payment {
  id                  String           @id @default(uuid())
  razorpayOrderId     String           @unique
  razorpayPaymentId   String?          @unique
  razorpaySignature   String?
  amount              Float
  currency            String
  status              String           @default("created")
  planType            String
  user                User             @relation(fields: [userId], references: [id], name: "UserPayments", onDelete: Cascade)
  userId              String
  webinar             WebinarDetails?  @relation(fields: [webinarId], references: [id], name: "WebinarPayments")
  webinarId           String?
  createdAt           DateTime         @default(now())
  subscription        Subscription?    @relation(name: "PaymentSubscription")
}

enum SubscriptionType {
  FOUR_DAY
  SIX_MONTH
  PAID_WEBINAR
}

model Subscription {
  id              String           @id @default(uuid())
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  type            SubscriptionType
  startDate       DateTime         @default(now())
  endDate         DateTime
  payment         Payment          @relation(fields: [paymentId], references: [id], name: "PaymentSubscription")
  paymentId       String           @unique
  unlockedContent Json?
  isActive        Boolean          @default(true)
}

model Content {
  id              String      @id @default(uuid())
  title           String
  description     String
  type            String      @default("FULL_ACCESS")
  unlockDate      DateTime?
  expiryDays      Int?
  accessDuration  Int?
  isPremium       Boolean     @default(false)
  videoUrl        String
  thumbnail       String
  createdAt       DateTime    @default(now())
}

model EBook {
  id          String   @id @default(uuid())
  title       String?
  description String?
  fileUrl     String?
  fileSize    Int?     
  fileType    String?  
  thumbnail   String?  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  isActive    Boolean  @default(true)
  downloads   Int      @default(0)
}

model EBook199 {
  id          String   @id @default(uuid())
  title       String?
  description String?
  fileUrl     String?
  fileSize    Int?     
  fileType    String?  
  thumbnail   String?  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  isActive    Boolean  @default(true)
  downloads   Int      @default(0)
}

model FourDayPlanVideo {
  id          String   @id @default(uuid())
  title       String?
  description String?
  videoUrl    String?
  day         Int?
  createdAt   DateTime @default(now())
}